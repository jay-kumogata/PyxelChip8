# Note: this source has been ported to Octo by Jay Kumogata on 07 MAR 2021
#       (only the notation changed: it has been converted manually)
#
# The source could be refactored to improve the readability, but I haven't
# been able to handle it yet. I don't changed the logic in particular.
# 
# ---------------------------------------------------------------------------
# Note: this source has been modified by David WINTER on 17 SEP 1997
#       (only the syntax changed: it has been converted in CHIPPER)
# 
# The source could be optimized to save some bytes, but I didn't wanted
# to modify it since there is no specific interest in this.
# 
# NOTE THAT THE ORIGINAL SOURCE HAD SEVERAL ERRORS !!!
# 
# ---------------------------------------------------------------------------
# 
# From: vervalin@AUSTIN.LOCKHEED.COM (Paul Vervalin)
# 
# 
#        OK folks here it is!  PONG for the HP48SX written in CHIP-48.
#        Some things you should know before you start playing are...
#        1)  This is my first attempt at programming in CHIP-48, so I 
#            know there are probably a few things that could have been
#            done better.
#        2)  The game never ends.  It keeps score, but only up to 9 for
#            each player, then it will roll over to 0.  Sorry, its the
#            only way I could think of to do it.  So, you have to play
#            whoever gets to a number first, wins.
#        3)  It is kind of slow, but then there are two paddles and ball
#            moving around all at once.
#        4)  The player who got the last point gets the serve...
#        5)  Keys 7 and 4 (on the HP48) control the up and down of the 
#            left player and the / and * keys control the up and down of
#            the right player.
# 
#        I think that's about it, so have fun!  
# 
# This is a detailed breakdown of the game, sooooooo, if anybody wants to
# make it better, or change it in some way, it might be a little easier.
# Also, about half of the code was in some way extracted from the BRIX
# program.  So, thanks to whoever wrote the original BRIX game.
# 
# 
# Registers
# ---------
# V0-V3  are scratch registers
# V4     X coord. of score
# V5     Y coord. of score
# V6     X coord. of ball
# V7     Y coord. of ball
# V8     X direction of ball motion
# V9     Y direction of ball motion
# VA     X coord. of left player paddle
# VB     Y coord. of left player paddle
# VC     X coord. of right player paddle
# VD     Y coord. of right player paddle
# VE     Score
# VF     collision detection

: main
	va := 2  # Set left player X coord.
	vb := 12 # Set left player Y coord.
	vc := 63 # Set right player X coord.
	vd := 12 # Set right player Y coord.
	
	i := paddle    # Get address of paddle sprite
	sprite va vb 6 # Draw left paddle
	sprite vc vd 6 # Draw right paddle
	
	ve := 0    # Set score to 00
	draw_score # Draw score

	v6 := 3 # Set X coord. of ball to 3
	v8 := 2 # Set ball X direction to right
	
: big_loop
	v0 := 0x60  # Set V0=delay before ball launch
	delay := v0 # Set delay timer to V0
	
: dt_loop
	v0 := delay                  # Read delay timer into V0
	if v0 != 0 then jump dt_loop # Read again delay timer if not 0
	
	v7 := random 23 # Set Y coord. to rand # AND 23 (0...23)
	v7 += 8         # And adjust it to is 8...31
	
	v9 := 0xff      # Set ball Y direction to up
	i := ball       # Get address of ball sprite
	sprite v6 v7 1  # Draw ball

: padl_loop
	i := paddle    # Get address of paddle sprite
	sprite va vb 6 # Draw left paddle
	sprite vc vd 6 # Draw right paddle
	
	# Set V0 to KEY 1 and Subtract 2 from Y coord. of left paddle if KEY in 1 is pressed
	v0 := OCTO_KEY_1 if v0 key then vb += 0xfe 
	# Set V0 to KEY 4 and Add 2 to Y coord. of left paddle if KEY in 4 is pressed
	v0 := OCTO_KEY_4 if v0 key then vb += 2

	v0 := 31       # Set V0 to max Y coord.  | These three lines are here to
	vb &= v0       # AND VB with V0          | adjust the paddle position if
	sprite va vb 6 # Draw left paddle        | it is out of the screen

	# Set V0 to KEY C and Subtract 2 from Y coord. of right paddle if KEY in C is pressed
	v0 := OCTO_KEY_C if v0 key then vd += 0xfe
	# Set V0 to KEY D and Add 2 to Y coord. of right paddle  if KEY in D is pressed 
	v0 := OCTO_KEY_D if v0 key then vd += 2

	v0 := 31       # Set V0 to max Y coord.  | These three lines are here to
	vd &= v0       # AND VD with V0          | adjust the paddle position if
	sprite vc vd 6 # Draw right paddle       | it is out of the screen

	i := ball      # Get address of ball sprite
	sprite v6 v7 1 # Draw ball
	
	v6 += v8  # Compute next X coord of the ball
	v7 += v9  # Compute next Y coord of the ball
	
	v0 := 63  # Set V0 to max X location
	v6 &= v0  # AND V6 with V0
	
	v1 := 31  # Set V1 to max Y location
	v7 &= v1  # AND V7 with V1
	
	if v6 == 2  then jump left_side  # if ball at left
	if v6 == 63 then jump right_side # if ball at right

: ball_loop
	if v7 == 31 then v9 := 0xff  #  Set Y direction to up if ball at bottom 
	if v7 == 0  then v9 := 1     # Set Y direction to down if ball at top
	sprite v6 v7 1               # Draw ball
	jump padl_loop               #
	
: left_side
	v8 := 2       # Set X direction to right
	v3 := 1       # Set V3 to 1 in case left player misses ball
	v0 := v7      # Set V0 to V7 Y coord. of ball
	v0 -= vb      # Subtract position of paddle from ball
	jump pad_coll # Check for collision
	
: right_side
	v8 := 254  # Set X direction to left
	v3 := 10   # Set V3 to 10 in case right player misses ball
	v0 := v7   # Set V0 to V7 Y coord. of ball
	v0 -= vd   # Subtract position of paddle from ball
	
: pad_coll
	if vf != 1 then jump ball_lost # if ball above paddle
	
	v1 := 2                       # Set V1 to 02
	v0 -= v1                      # Subtract V1 from V0
	if vf != 1 then jump ball_top # Ball at top of paddle if ball at top of paddle
	
	v0 -= v1                      # Subtract another 2 from V0
	if vf != 1 then jump pad_hit  # Ball in middle of paddle if ball at middle of paddle
	
	v0 -= v1                      # Subtract another 2 from V0
	if vf != 1 then jump ball_bot # Ball at bottom of paddle if ball at bottom of paddle
	
: ball_lost
	v0 := 32      # Set lost ball beep delay
	buzzer := v0  # Beep for lost ball
	
	draw_score # Erase previous score
	ve += v3   # Add 1 or 10 to score depending on V3
	draw_score # Write new score
	
	v6 := 62                # Set ball X coord. to right side
	if v3 != 1 then v6 := 3 # Set ball X coord. to left side if left player got point
	v8 := 0xfe              # Set direction to left
	if v3 != 1 then v8 := 2 # Set direction to right  if left player got point
	jump big_loop           #
	
: ball_top
	v9 += 0xff                    # Subtract 1 from V9, ball Y direction 
	if v9 == 0xfe then v9 := 0xff # Set V9=FF (-1)  if V9 == FE (-2)
	jump pad_hit                  #

: ball_bot
	v9 += 1                   # Add 1 to V9, ball Y direction
	if v9 == 2 then v9 := 1   # Set V9=01  if V9 == 02
	
: pad_hit
	v0 := 4        # Set beep for paddle hit
	buzzer := v0   # Sound beep
	
	v6 += 1                    #
	if v6 == 64 then v6 += 254 #
	jump ball_loop             #
	
: draw_score
	i := score     # Get address of Score
	bcd ve         # Stores in memory BCD representation of VE
	load v2        # Reads V0...V2 in memory, so the score
	i := hex v1    # I points to hex char in V1, so the 1st score char
	v4 := 0x14     # Set V4 to the X coord. to draw 1st score char
	v5 := 0        # Set V5 to the Y coord. to draw 1st score char
	sprite v4 v5 5 # Draw 8*5 sprite at (V4,V5) from M[I], so char V1
	v4 += 0x15     # Set X to the X coord. of 2nd score char
	i := hex v2    # I points to hex char in V2, so 2nd score char
	sprite v4 v5 5 # Draw 8*5 sprite at (V4,V5) from M[I], so char V2
	return         # Return

: paddle
  0x80 0x80 0x80 0x80 0x80 0x80
	
: ball
  0x80 0x80
	
: score
  0x00 0x00 0x00 0x00