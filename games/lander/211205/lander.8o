# Lunar lander clone for the CHIP-8
#
# Coded by Jeffrey Massung as an example of the
# CHIP-8 assembler.
#
# Have fun!
#

# Where is the lander?
#
:alias x                        v4
:alias y                        v5

# Current thrust vector (y) and tilt (x). These are 0x80
# when not moving. When they drop to #40 then the lander
# X/Y will decrease by 1. When they reach 0xc0 then the
# lander X/Y will increase by 1. Then the the thrust/tilt
# will reset back to 0x80.
#
:alias thrust                   v6
:alias tilt                     v7

# Thrust vectors (X and Y). Each loop iteration these will
# be applied to the thrust/tilt of the lander.
#
:alias vx                       v8     # affects tilt
:alias vy                       v9     # affects thrust

# How much fuel is in use and is left.
#
:alias fuel_use                 va
:alias fuel                     vb

# Where is the target platform along the ground.
#
:alias plat_x                   vc

# Key mapping.
#
:const up                       5     # w
:const left                     7     # a
:const right                    9     # d

# Rate at which gravity is applied.
#
:const g                        10

# Whether or not thrust is visible is stored in R0. This
# is toggled every time the thrust is drawn so it can be
# checked and the thrust can be hidden if desired.

: main
#                super
#                extended

# Initial setup for the game.
#
: start           hires


# Initial setup for every level.
#
: init            clear

                # Show the current level and score.
                next_level
                draw_score

                # Wait for a key press or a few seconds.
                v0 := key
                clear

                # Initialize all major pieces.
                init_border
                init_ground
                init_platform
                smooth_terrain
                init_lander
                fill_tank

                # Main game loop.
								loop
									input
                	move
                	gravity

                	# Has the lander landed successfully?
 									i := landed
                	load v0
	             		if v0 != 0 then
                	jump init

                # Do it all over again...
								again

# Advance the level, display it, clear variables.
#
: next_level    i := level
                load v0

                # Write the new level # and clear the landed flag.
  							v0 += 1
                v1 := 0
                save v1

                # Display the level and # in the top left.
                i := level_text
                v1 := 39
                v2 := 26
                v3 := 5

                # Display LEVEL.
                sprite       v1 v2 5  # L
                v1 += 4
                i += v3
                sprite       v1 v2 5  # E
                v1 += 4
                i += v3
                sprite       v1 v2 5  # V
                v1 += 4
                i += v3
                sprite       v1 v2 5  # E
                v1 += 4
                i += v3
                sprite       v1 v2 5  # L

                # Convert the level # to BCD.
                i := scratch
                bcd         v0
                load v2

                # Display the level number.
                i := hex v1
                v0 := 66
                v3 := 26
                sprite       v0 v3 5
                i := hex v2
                v0 += 5
                sprite       v0 v3 5
                return


# Display the score.
#
: draw_score    i := score_text
                v0 := 39
                v1 := 33
                v2 := 5

                # Display SCORE.
                sprite       v0 v1 5  # S
                v0 += 4
                i += v2
                sprite       v0 v1 5  # C
                v0 += 4
                i += v2
                sprite       v0 v1 5  # O
                v0 += 4
                i += v2
                sprite       v0 v1 5  # R
                v0 += 4
                i += v2
                sprite       v0 v1 5  # E

                # Load the score.
                i := score
                load v1

                # Perform a 16-bit BCD conversion.
                i := scratch
                bcd         v0	# does not work
                load v4

                # Display the number.
                i := hex v1
                v0 := 66
                v1 := 33
                sprite       v0 v1 5
                i := hex v2
                v0 += 5
                sprite       v0 v1 5
                i := hex v3
                v0 += 5
                sprite       v0 v1 5
                i := hex v4
                v0 += 5
                sprite       v0 v1 5

                # Done
                return


# Initialize the lander, pick a random position
#
: init_lander     x := random 0x3f
                x += 0x20
                y := 0

                # Reset the thrust flag.
                v0 := 0
                saveflags v0

                # Start with an initial falling velocity.
                vy := 8

                # Pick a random, lateral velocity.
                vx := random 0x1f
                vx += -15

                # Reset the thrust/tilt vectors.
                thrust := 0x80
                tilt := 0x80

                # When fuel_use rolls over, fuel is expended.
                fuel_use := 0
                fuel := 64

                # Setup the initial delay and start falling.
                v0 := g
                delay := v0

                # Display it.
                draw_lander
                return


# Initialize the ground and pick a random platform.
#
: init_ground	v8 := 0

                # Pick a random, initial elevation. (rnd(22)+42)
                v7 := random 15
                v0 := random 7
                v7 += v0
                v7 += 42

                # Terrain is broken up into 3, 5-byte "features." The
                # first 4 features go up and the next 4 go down. A
                # random (0-3) feature is chosen, and if the current
                # elevation is too high already then add 4 to shift into
                # the downward elevation set.
                #
                pick_feature
                pick_feature
                pick_feature

                # Done.
                return

                # Pick a random feature.
: pick_feature  v0 := random 3

                # Shift into the downward feature set if elevation is high.
                v1 := 48
                v1 -= v7
                if vf != 1 then
                v0 += 4

                # Multiply by 8 to get to the right feature.
                v0 <<= v0
                v0 <<= v0
                v0 <<= v0

                # Load the feature data (5 bytes long).
                i := features
                i += v0
                load v6

                # Add the current elevation to each delta.
                v0 += v7
                v1 += v7
                v2 += v7
                v3 += v7
                v4 += v7

                # Update the elevation.
                v7 := v4

                # Write the elevations to memory.
                i := elevation
                i += v8
                save v4

                # Draw each elevation.
                draw_elevation
                v0 := v1
                draw_elevation
                v0 := v2
                draw_elevation
                v0 := v3
                draw_elevation
                v0 := v4
                draw_elevation
                return

                # Calculate the actual elevation (64-v3)
: draw_elevation  i := ground

                # v9=v8*8 (x coordinate)
                v9 := v8
                v9 <<= v9
                v9 <<= v9
                v9 <<= v9

                # Advance the terrain X.
                v8 += 1

                # va=v0 (y coordinate)
                va := v0

                # Draw the ground sprite.
: draw_ground     sprite       v9 va 14
                va += 14
                vb := 64
                vb -= va
                if vf != 0 then           # va >= 64
                jump        draw_ground
                return


# Find the lowest spot (that's visible) and use it for the target.
#
: init_platform v2 := 0       # lowest
                v1 := 0       # current x

                # Load the terrain elevation at v1.
: next_x        i := elevation
                i += v1
                load v0

                # Is it too low?
                v3 := 64
                v3 =- v0
                if vf != 0 then
                jump        not_lower

                # Pick a random number so it's not ALWAYS the lowest.
                v3 := random 0xF
                v0 += v3

                # Is it lower than our current lowest (v2)?
                v3 := v2
                v3 -= v0

                # If so, update platform position
                if vf != 0 then
                jump        not_lower

                # Update lowest and x.
                plat_x := v1
                v2 := v0

                # Next.
: not_lower       v1 += 1
                if v1 != 0x10 then
                jump        next_x

                # Reload the height.
                i := elevation
                i += plat_x
                load v0

                # Set the platform X position (plat_x * 3)
                plat_x <<= plat_x
                plat_x <<= plat_x
                plat_x <<= plat_x

                # Draw the platform at the proper elevation.
                i := platform
                sprite       plat_x v0 1
                return


# Add in rough terrain to make it a bit more smooth.
#
: smooth_terrain  v2 := 0

                # Get the x coordinate of this terrain block
: next_block      v1 := v2
                v1 <<= v1
                v1 <<= v1
                v1 <<= v1

                # If this is where the platform is, skip it.
                if v1 == plat_x then
                jump        no_cap

                # Load the elevation at that point.
                i := elevation
                i += v2
                load v0
                v0 += -2

                # Pick a random terrain cap.
                i := terrain_caps
                v3 := random 7
                v3 <<= v3
                i += v3
                sprite       v1 v0 2

                # Advance to the next terrain block.
: no_cap          v2 += 1
                if v2 != 15 then
                jump        next_block
                return


# Called every iteration. Checks if the delay has expired and
# then applies gravity to the VY vector.
#
: gravity         v0 := delay
                if v0 != 0 then
                jump        apply_vy

                # Increase the downward velocity of the lander.
                vy += 1

                # Reset the delay timer.
                v0 := g
                delay := v0

                # If the thrust is visible, hide it.
                loadflags v0
                if v0 != 0 then
                draw_thrust

                # Apply VY to the thrust vector.
: apply_vy        thrust += vy

                # Should the lander fall to the ground?
                v0 := 0xc0
                v0 -= thrust
                if vf == 0 then
                jump        drop_lander

                # Should the lander climb higher?
                v0 := 0x40
                v0 -= thrust
                if vf == 0 then
                return

                # Launch the lander higher.
                hide_lander
                y += -1
                draw_lander

                # Reset the thrust vector.
                thrust += 0x40
                thrust += v0
                return

                # The lander should fall a bit.
: drop_lander     hide_lander
                y += 1
                draw_lander

                # Did the lander hit the ground?
                if vf != 0 then
                jump        land

                # Reset the thrust vector.
                thrust += -64 # 0x40
                return

                # The lander collided with the ground.
: land            hide_lander
                y += -1
                draw_lander

                # Is the lander not on the platform?
                plat_x += -1
                if x <= plat_x then
                jump        crash
                plat_x += 6
                if x >= plat_x then
                jump        crash

                # Is VY too fast?
                v0 := 24 # 12
                if vy >= v0 then
                jump        crash

                # Take the absolute value of VX.
                v0 := 0x80
                v0 -= vx
                if vf != 0 then
                jump        skip_neg

                # Negate VX.
                v0 := 0xFF
                vx ^= v0
                vx += 1

                # Is VX too fast?
: skip_neg        v0 := 16 # 8
                if vx >= v0 then
                jump        crash

                # Add points just for landing.
                vf := 25
                inc_score

                # Get more points from any left over fuel.
                fuel_bonus

                # Write a byte indicating the lander has landed.
                v0 := 1
                i := landed
                save v0

                # Reset and start the next level.
                return


# The lander didn't land on the platform or was going too fast.
#
: crash           draw_lander
                v0 := 20
                buzzer := v0

                # Draw the explosion animation.
                i := explosion
                vd := 8
                v1 := 0
                v2 := 5

                # Draw next frame.
: draw_exp        sprite       x y 5
                delay := vd

                # Wait a before showing the next frame.
: wait_0          v0 := delay
                if v0 != 0 then
                jump        wait_0

                # Have all 5 frames drawn?
                sprite       x y 5
                i += v2
                v1 += 1
                if v1 != 5 then
                jump        draw_exp
                jump        game_over


# Called every iteration, Applies VX to the tilt vector and
# determines if the lander should move left or right.
#
: move            tilt += vx

                # Should the lander list to the left?
: tilt_left       v0 := 0x40
                v0 =- tilt
                if vf != 0 then
                jump        tilt_right

                # Move and redraw the lander.
                hide_lander
                x += -1
                draw_lander

                # Did the lander crash into something?
                if vf != 0 then
                jump        crash

                # Reset the tilt vector.
                tilt += 0x40
                return

                # Should the lander list to the right?
: tilt_right      v0 := 0xc0
                v0 -= tilt
                if vf != 0 then
                return

                # Move and redraw the lander.
                hide_lander
                x += 1
                draw_lander

                # Did the lander crash into something?
                if vf != 0 then
                jump        crash

                # Reset the tilt vector.
                tilt += -64 # 0x40
                return


# Called once per iteration to process controls.
#
: input           v0 := up
                if v0 key then
                thrust_up
                v0 := left
                if v0 key then
                thrust_left
                v0 := right
                if v0 key then
                jump thrust_right
                return

                # Expend a good amount of fuel.
: thrust_up       v0 := 0xC0
                spend_fuel

                # Does the player have fuel left?
                if vf != 1 then
                return

                # Add to the VY vector, but not too much.
                vy += -2

                # Play a little bloop sound.
                v0 := 1
                buzzer := v0

                # Show the thrust.
                jump        draw_thrust

                # Spend some fuel to thrust sideways.
: thrust_left     v0 := 0x60
                spend_fuel

                # Is there any fuel left?
                if vf != 1 then
                return

                # Update the tilt vector.
                if vx != -60 then
                vx += -2
                return

                # Spend some fuel to thrust sideways.
: thrust_right    v0 := 0x60
                spend_fuel

                # Is there any fuel left?
                if vf != 1 then
                return

                # Update the tilt vector.
                if vx != 60 then
                vx += 2
                return


# Called when thrusting to use some more fuel. V0 should
# contain the amount of fuel to use. VF will be 0 if there
# is no more fuel to spend.
#
: spend_fuel      vf := 0
                if fuel == 64 then
                return

                # Spend the fuel request in V0.
                fuel_use -= v0
                if vf != 0 then
                return

                # A bar of fuel has been spent.
                i := fuel_bar
                v0 := 120
                sprite       v0 fuel 1
                fuel += 1
                vf := 1
                return


# Call to erase or redraw the lander sprite.
#
: hide_lander     loadflags v0
                if v0 != 0 then
                draw_thrust
: draw_lander     i := lander
                sprite       x y 5
                return
: draw_thrust     i := lander_thrust
                v0 := y
                v0 += 5
                sprite       x v0 3

                # Toggle whether or not the thrust is visible.
                loadflags v0
                v1 := 1
                v0 ^= v1
                saveflags v0
                return


# Add points to the score. VF=points to add.
#
: inc_score       i := score
                load v1

                # Increment, add carry to v1.
                v0 += vf
                v1 += vf

                # Save the score back to memory.
: write_score     save v1
                return


# Player completely ran out of points. Game over.
: game_over       clear

                # Get the text.
                i := game_over_text
                v2 := 5
                v0 := 45
                v1 := 25

                # Display GAME OVER.
                sprite       v0 v1 5 # G
                v0 += 4
                i += v2
                sprite       v0 v1 5 # A
                v0 += 4
                i += v2
                sprite       v0 v1 5 # M
                v0 += 4
                i += v2
                sprite       v0 v1 5 # E
                v0 += 6
                i += v2
                sprite       v0 v1 5 # O
                v0 += 4
                i += v2
                sprite       v0 v1 5 # V
                v0 += 4
                i += v2
                sprite       v0 v1 5 # E
                v0 += 4
                i += v2
                sprite       v0 v1 5 # R

                # Display the final score.
                draw_score
                exit


# Draw the border that wraps the fuel tank.
#
: init_border     i := border
                v0 := 120
                v1 := 0

                # Draw the border completely.
		loop
		     sprite       v0 v1 8
                     v1 += 8
                     if v1 != 64 then
                again
                return


# Keep adding fuel back until it is full.
#
: fill_tank       i := fuel_text
                v0 := 120
                v1 := 0

                # Draw the "fuel" sprite.
                sprite       v0 v1 12
                v1 += 12
                i += v1
                sprite       v0 v1 11

                # Fill up the fuel bar.
                i := fuel_bar
                fuel := 64
		loop
			fuel += -1
                	sprite       v0 fuel 1

                	# Stop when full.
                	if fuel != 0 then
                	again
                return


# Take the rest of the fuel and add it to the score.
#
: fuel_bonus      if fuel == 64 then
                return

                # Erase the next level of fuel.
                i := fuel_bar
                v0 := 120
                sprite       v0 fuel 1

                # Take away from the fuel and add score.
                fuel += 1
                vf := 2
                inc_score

                # Keep going until fuel is gone.
                jump        fuel_bonus


# Scratch memory for all kinds of things (like BCD)...
#
: scratch         0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 # pad         16


# The score is stored here in memory.
#
: score           100 0


# This memory location contains the level number.
#
: level           0


# This memory location is non-zero once the lander has landed!
#
: landed          0


# Contains the height of the ground every 8 pixels.
#
: elevation       0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 # pad         15


# This is the FUEL gauge text. It's a tall, vertical sprite.
#
: fuel_text       0b00011100
                0b00010000
                0b00011000
                0b00010000
                0b00010000
                0b00000000
                0b00010100
                0b00010100
                0b00010100
                0b00010100
                0b00011100
                0b00000000
                0b00011100
                0b00010000
                0b00011100
                0b00010000
                0b00011100
                0b00000000
                0b00010000
                0b00010000
                0b00010000
                0b00010000
                0b00011100


# A single line of the fuel gauge used.
#
: fuel_bar        0b00111110


# Border that surrounds the fuel gauge. It's there so the lander
# collides when too far right, but also too far left when wrapping
# video memory.
#
: border         0x41 0x41 0x41 0x41 0x41 0x41 0x41 0x41


# Displayed when game is over.
#
: game_over_text  0b01100000
                0b10000000
                0b10100000
                0b10100000
                0b01100000

                0b01000000
                0b10100000
                0b11100000
                0b10100000
                0b10100000

                0b10100000
                0b11100000
                0b11100000
                0b10100000
                0b10100000

                0b11100000
                0b10000000
                0b11000000
                0b10000000
                0b11100000

                0b01000000
                0b10100000
                0b10100000
                0b10100000
                0b01000000

                0b10100000
                0b10100000
                0b10100000
                0b10100000
                0b01000000

                0b11100000
                0b10000000
                0b11000000
                0b10000000
                0b11100000

                0b11000000
                0b10100000
                0b11000000
                0b10100000
                0b10100000


# Displayed at the start of the next level with the score.
#
: level_text      0b10000000
                0b10000000
                0b10000000
                0b10000000
                0b11100000

                0b11100000
                0b10000000
                0b11000000
                0b10000000
                0b11100000

                0b10100000
                0b10100000
                0b10100000
                0b10100000
                0b01000000

                0b11100000
                0b10000000
                0b11000000
                0b10000000
                0b11100000

                0b10000000
                0b10000000
                0b10000000
                0b10000000
                0b11100000


# Displayed each level.
#
: score_text      0b01100000
                0b10000000
                0b01000000
                0b00100000
                0b11000000

                0b01100000
                0b10000000
                0b10000000
                0b10000000
                0b01100000

                0b01000000
                0b10100000
                0b10100000
                0b10100000
                0b01000000

                0b11000000
                0b10100000
                0b11000000
                0b10100000
                0b10100000

                0b11100000
                0b10000000
                0b11000000
                0b10000000
                0b11100000


# Ground bitmap. The Platform bitmap is offset by a byte so that when
# the two overlap the platform will be solid.
#
: ground          0b10101010
: platform        0b01010101
                0b10101010
                0b01010101
                0b10101010
                0b01010101
                0b10101010
                0b01010101
                0b10101010
                0b01010101
                0b10101010
                0b01010101
                0b10101010
                0b01010101

# These are the sprite "caps" on the top of terrains that do not have
# the platform. They are intended to give variation and smooth the
# terrain out a bit. Each is just two bytes rendered on top of each
# elevation.
#
: terrain_caps    0b00101000
                0b01010100

                0b00100000
                0b01010100

                0b00001000
                0b01010100

                0b00000000
                0b01010000

                0b00000000
                0b00010100

                0b00000010
                0b01000101

                0b00100000
                0b01010000

                0b00000000
                0b01000100

# Lander sprite.
#
: lander          0b01110000
                0b11111000
                0b11111000
                0b01010000
                0b11011000
: lander_thrust   0b01010000
                0b00100000
                0b00100000

# Explosion animation (5, 5x5 frames).
: explosion       0b00000000
                0b00100000
                0b01010000
                0b00100000
                0b00000000

                0b00000000
                0b01010000
                0b00100000
                0b01010000
                0b00000000

                0b00000000
                0b01010000
                0b10001000
                0b01010000
                0b00000000

                0b01010000
                0b10001000
                0b00000000
                0b10001000
                0b01010000

                0b10101000
                0b00000000
                0b10001000
                0b00000000
                0b10101000

# There are 8 possible terrain "features", each is 5-bytes long with
# 3 padding bytes for easy shifting.
#
: features      8 16 22 28 34 0 0 0
                8  4  4 12 18 0 0 0
                6 12 18 18 24 0 0 0
                -4  2  8 14 20 0 0 0

                -8 -16 -22 -28 -34   0 0 0
                -8  -4  -4 -12 -18   0 0 0
                -6 -12 -18 -18 -24   0 0 0
                -4  -2  -8 -14 -20   0 0 0