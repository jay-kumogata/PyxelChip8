# Drawing a random maze like this one consists in drawing random diagonal
# lines. There are two possibilities: right-to-left line, and left-to-right
# line. Each line is composed of a 4*4 bitmap. As the lines must form non-
# circular angles, the two bitmaps won't be '/' and '\'. The first one
# (right line) will be a little bit modified. See at the end of this source.
#
# The maze is composed of 8 lines (as the bitmaps are 4 pixels high), each
# line consists of 16 bitmaps.
# Bitmaps are drawn in random mode. We choose a random value (0 or 1).
# If it is 1, we draw a left line bitmap. If it is 0, we draw a right one.

# Register usage:
#
# v0: X-coordinate of the bitmap
# v1: Y-coordinate of the bitmap
# v2: Random number


: main

    v0 := 0
    v1 := 0

: myloop

    i := left       # We draw a left line by default, as the random number
                    # is 0 or 1. If we suppose that it will be 1, we keep
                    # drawing the left line. If it is 0, we change register
                    # I to draw a right line.

    v2 := random 1  # Load in v2 a 0...1 random number

                    # It is 1 ? If yes, I still refers to the left line
                    # bitmap.
    if v2 != 1 then i := right 
                    # If not, we change I to make it refer the right line
                    # bitmap.

    sprite v0 v1 4  # And we draw the bitmap at v0, v1.

    v0 += 4         # The next bitmap is 4 pixels right. So we update
                    # v0 to do so.

    if v0 != 64 then jump myloop
                    # If v0==64, we finished drawing a complete line, so we
                    # skip the jump to LOOP, as we have to update v1 too.
                    # We did not draw a complete line ? So we continue !

    v0 := 0         # The first bitmap of each line is located 0, v1.

    v1 += 4         # We update v1. The next line is located 4 pixels doan.

    if v1 != 32 then jump  myloop
                    # Have we drawn all the lines ? If yes, v1==32.
                    # No ? So we continue !

: fin    
    jump fin        # Infinite loop...

: right             # 4*4 bitmap of the left line

    0b10000000
    0b01000000
    0b00100000
    0b00010000

: left              # 4*4 bitmap of the right line
                    # And YES, it is like that...
    0b00100000
    0b01000000
    0b10000000
    0b00010000