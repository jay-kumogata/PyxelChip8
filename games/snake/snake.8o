# Note: this source has been ported to Octo by Jay Kumogata on 14 Aug 2021.
#       (only the notation changed: it has been converted manually.)
# 
#---------------------------------------------------------------------------
# This is a simple version of the game Snake for the CHIP-8.
#
# Coded by Jeffrey Massung as an example of the
# CHIP-8 assembler.
#
# Have fun!
#

# Let's declare some variables in lieu of registers.
:alias head_x	v4
:alias head_y	v5
:alias score	v6
:alias direction	v7
:alias head	va
:alias tail	vb
:alias food_x	v8
:alias food_y	v9

# And declare some constants values.
:const up	0
:const right	4
:const down	8
:const left	12

: main
	# The snake has an initial length of 2 (4=x,y,x,y). Read
	# comment at end of the program to understand why 8 and
	# 4 are used here.
	#
	head := 8
	tail := 4
	
	# No initial score. Movement to the right.
	score := 0
	direction := right
	
	# Load the initial snake tail and head into memory.
	i := snake_tail
	i += tail
	load head_y

	# Draw the initial snake.
 	 i := start_position
	sprite v0 v1 1
	
	# Draw the initial score and spawn food.
	draw_score
	spawn_food

: game_loop
	# Enter the main game loop.
	user_input
	move
	check_bounds
	write_head
	draw_head
	erase_tail
	jump game_loop

: user_input

	# Is the UP key (W) pressed?
	v0 := 5
	if v0 key then direction := up

	# Is the LEFT key (A) pressed?
	v0 := 7
	if v0 key then direction := left

	# Is the DOWN key (S) pressed?
	v0 := 8
	if v0 key then direction := down

	# Is the RIGHT key (D) pressed?
	v0 := 9
	if v0 key then direction := right
	;

: move

	# move based on value in direction register
	v0 := direction
	jump0 move_table

: move_table

	# each is a 4-byte offset from the other
	head_y -= 1
	;
	head_x += 1
	;
	head_y += 1
	;
	head_x -= 1
	;

: write_head

	# Offset to the head address to write to.
	i := snake_tail

	# Pre-increment the head position.
	head += 2
	i += head

	# Write the head X,Y to [I].
	v0 := head_x
	v1 := head_y
	save v1
	;

: erase_tail

	# Offset to the tail address to read from.
	i := snake_tail
	i += tail

	# Load the tail position into V0,V1.
	load v1

	# Erase the dot that's already there.
	i := dot
	sprite v0 v1 1

	# Post-increment the tail address offset.
	tail += 2
	;

: draw_head

	# Draw the new head position.
	i := dot
	sprite head_x head_y 1

	# If the head didn't collide with anything, return.
	if vf != 1 then ;

	# Check to see if the head hit the food. If not, game over.
	if head_x != food_x then jump game_over
	if head_y != food_y then jump game_over

	# Play a little beep for eating food.
	v0 := 2
	buzzer := v0

	# Erase, increment, and redraw the score.
	draw_score
	score += 1
	draw_score

	# Grow the snake by 2. This is done by growing the tail. We
	# don't want to erase anything on the screen, so pre-decrement
	# the tail offset and then write 2 dummy positions. This way
	# two new head positions will be written before the tail
	# catches up. We have to do this two times in case we wrap
	# a byte boundary.

	v0 := 0xff  # dummy x
	v1 := 0xff  # dummy y

	# Write a dummy position.
	tail -= 2
	i := snake_tail
	i += tail
	save v1

	# And do it again.
	tail -= 2
	i := snake_tail
	i += tail
	save v1

	# Now redraw the head (since it was turned off).
	i := dot
	sprite head_x head_y 1

	# Tail call to spawn another food pellet.
	jump spawn_food

: check_bounds

	# Is X == -1 or X == 64?
	if head_x == -1 then jump game_over
	if head_x == 64 then jump game_over

	# Is Y == -1 or Y == 32?
	if head_y == -1 then jump game_over
	if head_y == 32 then jump game_over

	# Keep playing.
	;

: spawn_food

	# Pick a random position to spawn food at.
	food_x := random  0x3f
	food_y := random  0x1f

	# If Y > 7 then we can draw food.
	v0 := 7
	if food_y > v0 then jump draw_food

	# If X < 54 then we can draw food.
	v0 := 54
	if v0 > food_x then jump draw_food

	# Overlapping the score area, try again.
	jump spawn_food

: draw_food

	# Draw it there.

	i := dot
	sprite food_x food_y 1

	# If nothing was already there, we're okay.
	if vf == 0 then ;
	
	# Otherwise, put it back and try again.
	sprite food_x food_y 1
	jump spawn_food

: draw_score

	# Where the score (in BCD) will be stored.
	i := scratch

	# Write the score as BCD, load it into v0..v2.
	bcd score
	load v2

	# Where to draw the score...
	v0 := 55
	v3 := 0

	# Draw the tens digit (stored in v1).
	i := hex v1
	sprite v0 v3 5
	v0 += 5

	# Draw the ones digit (stored in v2).
	i := hex v2
	sprite v0 v3 5
	;

: game_over

	# Play a long, buzz sound.
	v0 := 15
	buzzer := v0

: done
	# Stop the program.
	jump done

: start_position

	# The initial snake is 3 pixels long.
	0b11100000

: dot

	# The snake and food are all a single dot.
	0b10000000

: scratch

	# Memory reserved for the BCD score value.
	0 0 0

: snake_tail

	# This is where the snake is stored in memory. These
	# 6 bytes are the initial tail positions of the snake.
	# 
	# The 4 padding is there just in case the first food
	# pellet just happens to be next to the snake's head.
	#
	0 0 0 0 10 10 11 10 12 10
